import os
import numpy as np
import pandas as pd
import tensorflow as tf
from LSTMModel import LSTMModel
from WindowGenerator import WindowGenerator

os.environ["CUDA_VISIBLE_DEVICES"] = "-1"

dict = {
    "UNKNOWN": 0,
    "SIT": 1,
    "STAND": 2,
    "WALK": 3,
    "SLEEP": 4,
}
if __name__ == '__main__':
    df = pd.read_csv("../datasetttt.csv")
    n = len(df)
    df["state"] = [dict[x] for x in df.state]
    train_df = df[0:int(n * 0.7)]
    val_df = df[int(n * 0.7):int(n * 0.9)]
    test_df = df[int(n * 0.9):]
    window = WindowGenerator(input_width=4, label_width=1, shift=1, label_columns=['state'], train_df=train_df, val_df=val_df, test_df=test_df)

    model = LSTMModel((32, 1), 5)
    model.compile(optimizer=tf.optimizers.Adam(lr=1e-3), loss=tf.losses.SparseCategoricalCrossentropy(from_logits=True), metrics='accuracy')
    model.fit(window.train, validation_data=window.val, epochs=16, batch_size=8, shuffle=True)

    input_data = np.asarray([[[-0.62249243, 2.2361844, 8.93546, 0.036193766, -0.026267206, 0.6966918, 3],
                              [0.11492168, 2.825158, 8.672098, 0.036193766, -0.026267206, 0.6966918, 3],
                              [0.11492168, 2.825158, 8.672098, 0.25060746, 0.08002335, 0.46822822, 3],
                              [0.51235914, 4.2544966, 8.806173, 0.25060746, 0.08002335, 0.46822822, 3],
                              [0.51235914, 4.2544966, 8.806173, 0.22006421, -0.07452556, 0.033292156, 3],
                              [-0.20829555, 3.6942532, 8.921095, 0.22006421, -0.07452556, 0.033292156, 3],
                              [-0.20829555, 3.6942532, 8.921095, -0.22403483, -0.23640485, -0.65270954, 3],
                              [-0.60094464, 1.5897499, 8.863634, -0.22403483, -0.23640485, -0.65270954, 3],
                              [-0.60094464, 1.5897499, 8.863634, -0.3022256, -0.65118235, -0.64843345, 3],
                              [-0.62967503, 1.970428, 9.648932, -0.3022256, -0.65118235, -0.64843345, 3],
                              [-0.62967503, 1.970428, 9.648932, 0.02031127, -0.105068825, -0.4981606, 3],
                              [-0.06943185, 2.3104045, 9.222764, 0.02031127, -0.105068825, -0.4981606, 3],
                              [-0.06943185, 2.3104045, 9.222764, -0.123242065, 0.1142318, 0.022296581, 3],
                              [0.40462008, 2.6791117, 9.328109, -0.123242065, 0.1142318, 0.022296581, 0],
                              [0.40462008, 2.6791117, 9.328109, 0.1339322, 0.30787608, 0.68936145, 0],
                              [0.5410896, 2.743755, 7.156568, 0.1339322, 0.30787608, 0.68936145, 2],
                              [0.5410896, 2.743755, 7.156568, 0.06612616, 0.049480084, 0.4260785, 2],
                              [0.19393034, 3.0262709, 9.627384, 0.06612616, 0.049480084, 0.4260785, 2],
                              [0.19393034, 3.0262709, 9.627384, -0.47448957, -0.099571034, 0.013744468, 2],
                              [0.5650316, 3.0789435, 9.481338, -0.47448957, -0.099571034, 0.013744468, 2],
                              [0.5650316, 3.0789435, 9.481338, -0.15317446, 0.040927973, 0.093767814, 2],
                              [0.2705448, 2.8083985, 9.648932, -0.15317446, 0.040927973, 0.093767814, 2],
                              [0.2705448, 2.8083985, 9.648932, 0.016035212, -0.05009095, 0.09254608, 2],
                              [0.46926352, 2.9712043, 9.081507, 0.016035212, -0.05009095, 0.09254608, 2],
                              [0.46926352, 2.9712043, 9.081507, -0.009010263, -0.08368854, -0.00580322, 2],
                              [0.260968, 2.9735985, 9.478944, -0.009010263, -0.08368854, -0.00580322, 2],
                              [0.260968, 2.9735985, 9.478944, -0.057268616, 0.026267206, -0.20372356, 2],
                              [0.059855044, 2.705448, 9.241918, -0.057268616, 0.026267206, -0.20372356, 2],
                              [0.059855044, 2.705448, 9.241918, -0.07192938, 0.040317107, -0.12064589, 2],
                              [0.110133275, 2.6767175, 9.466972, -0.07192938, 0.040317107, -0.12064589, 2],
                              [0.110133275, 2.6767175, 9.466972, -0.001069014, 0.06047566, -0.04917465, 2],
                              [0.06464344, 2.7581203, 9.466972, -0.001069014, 0.06047566, -0.04917465, 0],
                              ]], dtype=np.float32)

    print(np.around(model.predict(input_data) * 100))
    # model.save("test")
    model.evaluate(window.test)

# model.evaluate(window.train)
